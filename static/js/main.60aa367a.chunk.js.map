{"version":3,"sources":["ThemeContext.js","Chart.js","MyTable.js","Body.js","App.js","index.js"],"names":["ThemeContext","createContext","ThemeProvider","props","useState","darkMode","setDarkMode","Provider","value","children","Chart","useContext","chartStyle","display","flexDirection","alignItems","height","width","color","backgroundColor","style","algoName","creator","data","options","title","text","hover","mode","intersect","tooltips","displayColors","legend","scales","yAxes","scaleLabel","labelString","xAxes","ticks","MyTable","rival","gameData","toCenterStyle","length","className","map","result","index","type","onClick","changeId","href","target","wins","losses","Object","keys","key","Body","algoId","setId","chartData","setChartData","chartLabels","setChartLabels","setRival","rivalData","setRivalData","creatorName","setCreatorName","playerAlgoName","setPlayerAlgoName","previousId","setPreviousId","pressedFind","setPressedFind","setWins","setLosses","showError","setShowError","lineData","labels","datasets","fill","lineTension","borderColor","borderWidth","find","a","ApiCall","fetch","fetched","status","json","then","response","console","log","JSON","stringify","matches","winning_algo","id","losing_algo","name","rating","dataArray","createdAt","labelArray","winCount","loseCount","startElo","matchLength","slope","opponent","elo","currentRival","opponentAlgoId","temp","tableDataObj","Ea","isIndividual","winning_user","displayName","losing_user","team","createdBy","forEach","match","user","Math","round","abs","push","turns","useEffect","buttonStyle","bodyStyle","toCenter","Button","Input","onChange","obj","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60aa367a.chunk.js","sourcesContent":["import React, { useState, createContext } from \"react\";\r\n\r\nexport const ThemeContext = createContext();\r\nexport default function ThemeProvider(props){\r\n\r\n    const [darkMode, setDarkMode] = useState(false)\r\n    \r\n    return (\r\n      <ThemeContext.Provider value={{darkMode, setDarkMode}}>\r\n        {props.children}\r\n      </ThemeContext.Provider>\r\n    )\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {Line} from 'react-chartjs-2';\r\nimport {Button} from 'reactstrap'\r\nimport './Chart.css'\r\nimport {ThemeContext} from \"./ThemeContext\";\r\nexport default function Chart(props) {\r\n    //console.log(\"algo name: \"+props.algoName)\r\n    const {darkMode} = useContext(ThemeContext);\r\n    const chartStyle = {\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      alignItems: \"center\",\r\n      height: \"100%\",\r\n      width: \"70%\",\r\n      color: darkMode ? \"#c9d1d9\" : \"black\",\r\n      backgroundColor: darkMode ? \"#0d1117\" : \"white\",\r\n    }\r\n    return (\r\n        <div style={chartStyle}>\r\n            <h2>algo: {props.algoName}</h2>\r\n            <h3>creator: {props.creator}</h3>\r\n            <Line\r\n            data={props.data}\r\n            options={{\r\n                title: { display: true, text: '' },\r\n                hover: { mode: 'nearest', intersect: false },\r\n                tooltips: { mode: 'nearest', intersect: false, backgroundColor: 'hsla(240,25%,76%,.81)', displayColors: false },\r\n                legend: { display: false },\r\n                scales: {\r\n                  yAxes: [{ display: true, scaleLabel: { display: true, labelString: 'Elo' } }],\r\n                  xAxes: [{ display: true, scaleLabel: { display: true, labelString: 'Opponents' }, ticks: { display: false } }]\r\n                }\r\n              }}\r\n            />\r\n            {/*\r\n            <div className=\"ButtonGroup\">\r\n              <Button>All time</Button>\r\n              <Button>1 Month</Button>\r\n              <Button>5 Months</Button>\r\n            </div>\r\n            */}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useContext} from 'react'\r\nimport './MyTable.css'\r\nimport {ThemeContext} from \"./ThemeContext\";\r\nexport default function MyTable(props) {\r\n    const {darkMode} = useContext(ThemeContext);\r\n    const rival = props.rival\r\n    const gameData = props.data\r\n    const toCenterStyle = {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        color: darkMode ? \"#c9d1d9\" : \"black\",\r\n        backgroundColor: darkMode ? \"#0d1117\" : \"white\",\r\n    }\r\n    //console.log(\"gameData: \"+JSON.stringify(gameData))\r\n    //console.log(\"rival: \"+rival)\r\n    return (\r\n        <div style={toCenterStyle}>\r\n            <h1>Rival: {rival}</h1>\r\n            <h2>Games Played: {gameData[rival][\"Results\"].length} </h2>\r\n            <table className=\"toCenter\">\r\n                <thead className=\"full\">\r\n                    <tr className=\"full\">\r\n                        <td className=\"data\"><h4>Algo name</h4></td>\r\n                        <td className=\"data\"><h4>Results</h4></td>\r\n                        <td className=\"data\"><h4>Turns</h4></td>\r\n                        <td className=\"data\"><h4>Elo</h4></td>\r\n                        <td className=\"data\"><h4>Game</h4></td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody className=\"toCenter\">\r\n                    {gameData[rival][\"Results\"].map((result, index)=> {\r\n                        return(\r\n                            <tr className=\"full\">\r\n                                <td className=\"data\"><button type=\"button\" className=\"link-button\" onClick={() => props.changeId(gameData[rival][\"AlgoId\"][index])}><h5>{gameData[rival][\"AlgoName\"][index]}</h5></button></td>\r\n                                <td className=\"data\"><h5>{gameData[rival][\"Results\"][index]}</h5></td>\r\n                                <td className=\"data\"><h5>{gameData[rival][\"Turns\"][index]}</h5></td>\r\n                                <td className=\"data\"><h5>{gameData[rival][\"Elo\"][index]}</h5></td>\r\n                                <td className=\"data\"><a href={gameData[rival][\"Game\"][index]} target=\"blank\"><h5>watch</h5></a></td>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            <h1>All Games</h1>\r\n            <div className=\"WAndL\">\r\n                <h2>Wins: {props.wins}</h2>\r\n                <h2>Losses: {props.losses}</h2>\r\n            </div>\r\n            <table className=\"toCenter\">\r\n                <thead className=\"full\">\r\n                    <tr className=\"full\">\r\n                        <td className=\"data\"><h4>Algo name</h4></td>\r\n                        <td className=\"data\"><h4>Results</h4></td>\r\n                        <td className=\"data\"><h4>Turns</h4></td>\r\n                        <td className=\"data\"><h4>Elo</h4></td>\r\n                        <td className=\"data\"><h4>Game</h4></td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody className=\"toCenter\">\r\n                {\r\n                    Object.keys(gameData).map((key) => {\r\n                        return(\r\n                        gameData[key][\"Results\"].map((result, index)=> {\r\n                            return(\r\n                                <tr className=\"full\">\r\n                                    <td className=\"data\"><button type=\"button\" className=\"link-button\" onClick={() => props.changeId(gameData[key][\"AlgoId\"][index])}><h5>{gameData[key][\"AlgoName\"][index]}</h5></button></td>\r\n                                    <td className=\"data\"><h5>{gameData[key][\"Results\"][index]}</h5></td>\r\n                                    <td className=\"data\"><h5>{gameData[key][\"Turns\"][index]}</h5></td>\r\n                                    <td className=\"data\"><h5>{gameData[key][\"Elo\"][index]}</h5></td>\r\n                                    <td className=\"data\"><a href={gameData[key][\"Game\"][index]}><h5>watch</h5></a></td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                        )\r\n                    })\r\n                }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, useEffect, useContext} from 'react';\r\nimport { Button, Input } from 'reactstrap';\r\nimport './Body.css';\r\nimport Chart from './Chart';\r\nimport MyTable from './MyTable';\r\nimport {ThemeContext} from \"./ThemeContext\";\r\n\r\nexport default function Body() {\r\n    const {darkMode, setDarkMode} = useContext(ThemeContext);\r\n    const [algoId, setId] = useState()\r\n    const [chartData, setChartData] = useState([]) //chart data\r\n    const [chartLabels, setChartLabels] = useState([])\r\n    const [rival, setRival] = useState(\"\")\r\n    const [rivalData, setRivalData] = useState({})\r\n    const [creatorName, setCreatorName] = useState(\"\")\r\n    const [playerAlgoName, setPlayerAlgoName] = useState(\"\")\r\n    const [previousId, setPreviousId] = useState(0)\r\n    const [pressedFind, setPressedFind] = useState(false)\r\n    const [fullData, setFullData] = useState({})\r\n    const [fiveMonthData, setFiveMonthData] = useState({})\r\n    const [oneMonthData, setOneMonthData] = useState({})\r\n    const [wins, setWins] = useState(0)\r\n    const [losses, setLosses] = useState(0)\r\n    const [showError, setShowError] = useState(false)\r\n    const lineData = {\r\n        labels: chartLabels,\r\n        datasets: [\r\n          {\r\n            fill: false,\r\n            lineTension: 0.5,\r\n            backgroundColor: darkMode ? 'black' : 'rgba(75,192,192,1)',\r\n            borderColor: darkMode ? 'rgba(175,175,175,1)' : 'rgba(0,0,0,1)',\r\n            borderWidth: 2,\r\n            data: chartData //ello rating\r\n          }\r\n        ]\r\n      }\r\n    const find = async () => {\r\n        setPressedFind(true)\r\n        setPreviousId(algoId)\r\n        const response = await ApiCall()\r\n    }\r\n    const onInputChange = (id) => {\r\n        setPressedFind(false)\r\n        setId(id)\r\n    }\r\n    const ApiCall = async () => {\r\n        //console.log(\"APICALL\")\r\n        //console.log(\"api call id: \"+algoId)\r\n        const fetched = await fetch(\"https://terminal.c1games.com/api/game/algo/\"+algoId+\"/matches\")\r\n        setShowError(fetched.status != 200)\r\n        const response = await fetched.json().then(response => {\r\n            console.log(\"response: \"+JSON.stringify(response))\r\n            const matches = response.data.matches\r\n\r\n            /*\r\n            var newDate = new Date()\r\n            var month = newDate.getMonth() + 1;\r\n            var year = newDate.getFullYear();\r\n            console.log(\"Month: \"+month)\r\n            console.log(\"Year: \"+year)\r\n            */\r\n            const { name, rating, createdAt } = matches[0].winning_algo.id == algoId ? matches[0].winning_algo : matches[0].losing_algo\r\n            \r\n            var dataArray = [1500]\r\n            var labelArray = [\"\"]\r\n            \r\n            var oneMonthDataArray =[]\r\n            var oneMonthLabelArray = []\r\n\r\n            var fiveMonthLabelArray = []\r\n            var fiveMonthDataArray = []\r\n            \r\n            var winCount = 0\r\n            var loseCount = 0\r\n            var startElo = 1500\r\n            var lineSize = 35\r\n            var magnitudeChange = 0.9\r\n            var matchLength = matches.length\r\n            var slope = (rating-startElo)/matchLength\r\n            console.log(\"slope: \"+slope)\r\n            var temp = startElo\r\n            var opponent\r\n            var result\r\n            var elo\r\n            var currentRival\r\n            var rivalCount=0;\r\n            var tableDataObj = {}\r\n            var creator\r\n            var Ea = 1/1.2\r\n            var isIndividual = matches[0] && matches[0].winning_user\r\n            if(isIndividual){\r\n                creator = matches[0].winning_algo.id == algoId ? matches[0].winning_user.displayName : matches[0].losing_user.displayName\r\n            }else{\r\n                creator = matches[0].winning_algo.id == algoId ? matches[0].winning_algo.team.createdBy.displayName : matches[0].losing_algo.team.createdBy.displayName\r\n            }\r\n            \r\n            var algoName\r\n            var opponentAlgoId\r\n            matches.forEach((match, index) => {\r\n                const won = match.winning_algo.id == algoId\r\n                if(won){\r\n                    winCount += 1\r\n                    isIndividual = (\"losing_user\" in match) || (\"team\" in match.losing_algo && JSON.stringify(match.losing_algo.team) == \"null\")\r\n                    if(isIndividual){\r\n                        opponent = \"losing_user\" in match ? match.losing_user.displayName : match.losing_algo.user\r\n                    }else{\r\n                        opponent = match.losing_algo.team.createdBy.displayName\r\n                    }\r\n                    result = \"W\"\r\n                    elo = match.losing_algo.rating\r\n                    algoName = match.losing_algo.name\r\n                    opponentAlgoId = match.losing_algo.id\r\n\r\n                    console.log(\"temp before: \"+temp)\r\n                    var tempRating = slope*index+startElo\r\n                    temp = tempRating+32*(1-Ea)\r\n                    console.log(\"temp after: \"+temp)\r\n\r\n                }else{\r\n                    loseCount += 1\r\n                    isIndividual = (\"winning_algo\" in match) || (\"team\" in match.winning_algo && JSON.stringify(match.winning_algo.team) == \"null\")\r\n                    if(isIndividual){\r\n                        opponent = \"winning_user\" in match ? match.winning_user.displayName : match.winning_algo.user\r\n                    }else{\r\n                        opponent = match.winning_algo.team.createdBy.displayName\r\n                    }\r\n                    result = \"L\"\r\n                    elo = match.winning_algo.rating\r\n                    algoName = match.winning_algo.name\r\n                    opponentAlgoId = match.winning_algo.id\r\n                    \r\n                    console.log(\"temp before: \"+temp)\r\n                    var tempRating = slope*index+startElo\r\n                    var tempRating = slope*index+startElo\r\n                    temp = tempRating+32*(0-Ea)\r\n                    console.log(\"temp after: \"+temp)\r\n                }\r\n                /*\r\n                console.log(\"m: \"+slope)\r\n                console.log(\"x: \"+(matchLength-index))\r\n                console.log(\"b: \"+startElo)\r\n                */\r\n                console.log(\"original: \"+(Math.round(slope*Math.abs(matchLength-index))+startElo))\r\n                console.log(\"new: \"+temp)\r\n                dataArray.push(Math.round(temp))\r\n                labelArray.push(algoName)\r\n                if(opponent in tableDataObj){\r\n                    tableDataObj[opponent][\"AlgoId\"].push(opponentAlgoId)\r\n                    tableDataObj[opponent][\"AlgoName\"].push(algoName)\r\n                    tableDataObj[opponent][\"Results\"].push(result)\r\n                    tableDataObj[opponent][\"Turns\"].push(match.turns)\r\n                    tableDataObj[opponent][\"Elo\"].push(elo)\r\n                    tableDataObj[opponent][\"Game\"].push(\"https://terminal.c1games.com/watch/\"+match.id)\r\n                    tableDataObj[opponent][\"count\"]+=1\r\n                }else{\r\n                    tableDataObj[opponent]={}\r\n                    tableDataObj[opponent][\"AlgoId\"]=[opponentAlgoId]\r\n                    tableDataObj[opponent][\"AlgoName\"]=[algoName]\r\n                    tableDataObj[opponent][\"Results\"]=[result]\r\n                    tableDataObj[opponent][\"Turns\"]=[match.turns]\r\n                    tableDataObj[opponent][\"Elo\"]=[elo]\r\n                    tableDataObj[opponent][\"Game\"]=[\"https://terminal.c1games.com/watch/\"+match.id]\r\n                    tableDataObj[opponent][\"count\"]=1\r\n                }\r\n                if(tableDataObj[opponent][\"count\"] > rivalCount){\r\n                    currentRival=opponent;\r\n                }\r\n            })\r\n            setChartData(dataArray)\r\n            setChartLabels(labelArray)\r\n            setRival(currentRival)\r\n            setRivalData(tableDataObj)\r\n            setCreatorName(creator)\r\n            setPlayerAlgoName(name)\r\n            setWins(winCount)\r\n            setLosses(loseCount)\r\n        });\r\n    }\r\n    const changeId = (id) => {\r\n        //console.log(\"CHANGEID\")\r\n        setId(id)\r\n    }\r\n    useEffect(()=>{\r\n        //console.log(\"algoId: \"+algoId)\r\n        //console.log(\"previousId: \"+previousId)\r\n        //console.log(\"pressedFind: \"+pressedFind)\r\n        if((algoId != previousId) && pressedFind){\r\n            //console.log(\"use effect triggered\")\r\n            setPreviousId(algoId)\r\n            find()\r\n        }\r\n    },[algoId, setId])\r\n    const buttonStyle = {\r\n        color: darkMode ? \"white\" : \"black\",\r\n        backgroundColor: darkMode ? \"#545b62\" : \"#AFAFAF\",\r\n        borderColor: darkMode ? \"#545b62\" : \"#AFAFAF\",\r\n    }\r\n    const bodyStyle = {\r\n        color: darkMode ? \"#c9d1d9\" : \"black\",\r\n        backgroundColor: darkMode ? \"#0d1117\" : \"white\",\r\n        height: \"100%\"\r\n    }\r\n    const toCenter = {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        color: darkMode ? \"#c9d1d9\" : \"black\",\r\n        backgroundColor: darkMode ? \"#0d1117\" : \"white\",\r\n    }\r\n    return (\r\n        <div style={bodyStyle}>\r\n            <div style={toCenter}>\r\n                <div className=\"darkModeContainer\">\r\n                    <Button style={buttonStyle} onClick={()=>{setDarkMode(!darkMode)}}>{darkMode ? \"Light Mode\" : \"Dark Mode\"}</Button>\r\n                </div>\r\n                <Input className=\"input\" onChange={(obj)=>onInputChange(obj.target.value)}/>\r\n                <Button className=\"button\" color=\"primary\" onClick={find}>Find</Button>\r\n                {showError && <h2>no algo with this id found</h2>}\r\n                {showError && <h2>(could have been deleted)</h2>}\r\n                {!showError && Object.keys(lineData).length != 0 && creatorName != \"\" && playerAlgoName != \"\" && Object.keys(rivalData).length != 0 && rival != \"\" && rival in rivalData &&\r\n                <div style={toCenter}>\r\n                    <Chart data={lineData} creator={creatorName} algoName={playerAlgoName}/>\r\n                    <MyTable data={rivalData} rival={rival} changeId={changeId} wins={wins} losses={losses}></MyTable>\r\n                </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Body from './Body';\nimport ThemeProvider from './ThemeContext';\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <ThemeProvider style={{height: \"100%\"}}>\n        <Body style={{height: \"100%\"}}>\n          </Body>\n      </ThemeProvider>\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}