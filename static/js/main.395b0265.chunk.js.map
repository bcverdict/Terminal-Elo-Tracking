{"version":3,"sources":["Chart.js","MyTable.js","Body.js","App.js","reportWebVitals.js","index.js"],"names":["Chart","props","className","algoName","creator","data","options","title","display","text","hover","mode","intersect","tooltips","backgroundColor","displayColors","legend","scales","yAxes","scaleLabel","labelString","xAxes","ticks","MyTable","rival","gameData","length","map","result","index","type","onClick","changeId","href","target","wins","losses","Object","keys","key","Body","useState","algoId","setId","chartData","setChartData","chartLabels","setChartLabels","setRival","rivalData","setRivalData","creatorName","setCreatorName","playerAlgoName","setPlayerAlgoName","previousId","setPreviousId","pressedFind","setPressedFind","setWins","setLosses","lineData","labels","datasets","fill","lineTension","borderColor","borderWidth","find","a","ApiCall","fetch","fetched","json","then","response","matches","winning_algo","id","losing_algo","name","rating","dataArray","createdAt","labelArray","winCount","loseCount","startElo","matchLength","slope","console","log","opponent","elo","currentRival","opponentAlgoId","temp","tableDataObj","Ea","isIndividual","winning_user","displayName","losing_user","team","createdBy","forEach","match","JSON","stringify","user","Math","round","abs","push","turns","useEffect","Input","onChange","obj","value","Button","color","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.395b0265.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Line} from 'react-chartjs-2';\r\nimport {Button} from 'reactstrap'\r\nimport './Chart.css'\r\nexport default function Chart(props) {\r\n    //console.log(\"algo name: \"+props.algoName)\r\n    return (\r\n        <div className=\"chart\">\r\n            <h2>algo: {props.algoName}</h2>\r\n            <h3>creator: {props.creator}</h3>\r\n            <Line\r\n            data={props.data}\r\n            options={{\r\n                title: { display: true, text: '' },\r\n                hover: { mode: 'nearest', intersect: false },\r\n                tooltips: { mode: 'nearest', intersect: false, backgroundColor: 'hsla(240,25%,76%,.81)', displayColors: false },\r\n                legend: { display: false },\r\n                scales: {\r\n                  yAxes: [{ display: true, scaleLabel: { display: true, labelString: 'Elo' } }],\r\n                  xAxes: [{ display: true, scaleLabel: { display: true, labelString: 'Opponents' }, ticks: { display: false } }]\r\n                }\r\n              }}\r\n            />\r\n            {/*\r\n            <div className=\"ButtonGroup\">\r\n              <Button>All time</Button>\r\n              <Button>1 Month</Button>\r\n              <Button>5 Months</Button>\r\n            </div>\r\n            */}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './MyTable.css'\r\nexport default function MyTable(props) {\r\n    const rival = props.rival\r\n    const gameData = props.data\r\n    //console.log(\"gameData: \"+JSON.stringify(gameData))\r\n    //console.log(\"rival: \"+rival)\r\n    return (\r\n        <div className=\"toCenter\">\r\n            <h1>Rival: {rival}</h1>\r\n            <h2>Games Played: {gameData[rival][\"Results\"].length} </h2>\r\n            <table className=\"toCenter\">\r\n                <thead className=\"full\">\r\n                    <tr className=\"full\">\r\n                        <td className=\"data\"><h4>Algo name</h4></td>\r\n                        <td className=\"data\"><h4>Results</h4></td>\r\n                        <td className=\"data\"><h4>Turns</h4></td>\r\n                        <td className=\"data\"><h4>Elo</h4></td>\r\n                        <td className=\"data\"><h4>Game</h4></td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody className=\"toCenter\">\r\n                    {gameData[rival][\"Results\"].map((result, index)=> {\r\n                        return(\r\n                            <tr className=\"full\">\r\n                                <td className=\"data\"><button type=\"button\" className=\"link-button\" onClick={() => props.changeId(gameData[rival][\"AlgoId\"][index])}><h5>{gameData[rival][\"AlgoName\"][index]}</h5></button></td>\r\n                                <td className=\"data\"><h5>{gameData[rival][\"Results\"][index]}</h5></td>\r\n                                <td className=\"data\"><h5>{gameData[rival][\"Turns\"][index]}</h5></td>\r\n                                <td className=\"data\"><h5>{gameData[rival][\"Elo\"][index]}</h5></td>\r\n                                <td className=\"data\"><a href={gameData[rival][\"Game\"][index]} target=\"blank\"><h5>watch</h5></a></td>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            <h1>All Games</h1>\r\n            <div className=\"WAndL\">\r\n                <h2>Wins: {props.wins}</h2>\r\n                <h2>Losses: {props.losses}</h2>\r\n            </div>\r\n            <table className=\"toCenter\">\r\n                <thead className=\"full\">\r\n                    <tr className=\"full\">\r\n                        <td className=\"data\"><h4>Algo name</h4></td>\r\n                        <td className=\"data\"><h4>Results</h4></td>\r\n                        <td className=\"data\"><h4>Turns</h4></td>\r\n                        <td className=\"data\"><h4>Elo</h4></td>\r\n                        <td className=\"data\"><h4>Game</h4></td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody className=\"toCenter\">\r\n                {\r\n                    Object.keys(gameData).map((key) => {\r\n                        return(\r\n                        gameData[key][\"Results\"].map((result, index)=> {\r\n                            return(\r\n                                <tr className=\"full\">\r\n                                    <td className=\"data\"><button type=\"button\" className=\"link-button\" onClick={() => props.changeId(gameData[key][\"AlgoId\"][index])}><h5>{gameData[key][\"AlgoName\"][index]}</h5></button></td>\r\n                                    <td className=\"data\"><h5>{gameData[key][\"Results\"][index]}</h5></td>\r\n                                    <td className=\"data\"><h5>{gameData[key][\"Turns\"][index]}</h5></td>\r\n                                    <td className=\"data\"><h5>{gameData[key][\"Elo\"][index]}</h5></td>\r\n                                    <td className=\"data\"><a href={gameData[key][\"Game\"][index]}><h5>watch</h5></a></td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                        )\r\n                    })\r\n                }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport { Button, Input } from 'reactstrap';\r\nimport './Body.css';\r\nimport Chart from './Chart';\r\nimport MyTable from './MyTable';\r\n\r\nexport default function Body() {\r\n    const [algoId, setId] = useState()\r\n    const [chartData, setChartData] = useState([]) //chart data\r\n    const [chartLabels, setChartLabels] = useState([])\r\n    const [rival, setRival] = useState(\"\")\r\n    const [rivalData, setRivalData] = useState({})\r\n    const [creatorName, setCreatorName] = useState(\"\")\r\n    const [playerAlgoName, setPlayerAlgoName] = useState(\"\")\r\n    const [previousId, setPreviousId] = useState(0)\r\n    const [pressedFind, setPressedFind] = useState(false)\r\n    const [fullData, setFullData] = useState({})\r\n    const [fiveMonthData, setFiveMonthData] = useState({})\r\n    const [oneMonthData, setOneMonthData] = useState({})\r\n    const [wins, setWins] = useState(0)\r\n    const [losses, setLosses] = useState(0)\r\n    const lineData = {\r\n        labels: chartLabels,\r\n        datasets: [\r\n          {\r\n            fill: false,\r\n            lineTension: 0.5,\r\n            backgroundColor: 'rgba(75,192,192,1)',\r\n            borderColor: 'rgba(0,0,0,1)',\r\n            borderWidth: 2,\r\n            data: chartData //ello rating\r\n          }\r\n        ]\r\n      }\r\n    const find = async () => {\r\n        setPressedFind(true)\r\n        setPreviousId(algoId)\r\n        const response = await ApiCall()\r\n    }\r\n    const onInputChange = (id) => {\r\n        setPressedFind(false)\r\n        setId(id)\r\n    }\r\n    const ApiCall = async () => {\r\n        //console.log(\"APICALL\")\r\n        //console.log(\"api call id: \"+algoId)\r\n        const fetched = await fetch(\"https://terminal.c1games.com/api/game/algo/\"+algoId+\"/matches\")\r\n        const response = await fetched.json().then(response => {\r\n            const matches = response.data.matches\r\n\r\n            /*\r\n            var newDate = new Date()\r\n            var month = newDate.getMonth() + 1;\r\n            var year = newDate.getFullYear();\r\n            console.log(\"Month: \"+month)\r\n            console.log(\"Year: \"+year)\r\n            */\r\n            const { name, rating, createdAt } = matches[0].winning_algo.id == algoId ? matches[0].winning_algo : matches[0].losing_algo\r\n            \r\n            var dataArray = [1500]\r\n            var labelArray = [\"\"]\r\n            \r\n            var oneMonthDataArray =[]\r\n            var oneMonthLabelArray = []\r\n\r\n            var fiveMonthLabelArray = []\r\n            var fiveMonthDataArray = []\r\n            \r\n            var winCount = 0\r\n            var loseCount = 0\r\n            var startElo = 1500\r\n            var lineSize = 35\r\n            var magnitudeChange = 0.9\r\n            var matchLength = matches.length\r\n            var slope = (rating-startElo)/matchLength\r\n            console.log(\"slope: \"+slope)\r\n            var temp = startElo\r\n            var opponent\r\n            var result\r\n            var elo\r\n            var currentRival\r\n            var rivalCount=0;\r\n            var tableDataObj = {}\r\n            var creator\r\n            var Ea = 1/1.2\r\n            var isIndividual = matches[0] && matches[0].winning_user\r\n            if(isIndividual){\r\n                creator = matches[0].winning_algo.id == algoId ? matches[0].winning_user.displayName : matches[0].losing_user.displayName\r\n            }else{\r\n                creator = matches[0].winning_algo.id == algoId ? matches[0].winning_algo.team.createdBy.displayName : matches[0].losing_algo.team.createdBy.displayName\r\n            }\r\n            \r\n            var algoName\r\n            var opponentAlgoId\r\n            matches.forEach((match, index) => {\r\n                const won = match.winning_algo.id == algoId\r\n                if(won){\r\n                    winCount += 1\r\n                    isIndividual = (\"losing_user\" in match) || (\"team\" in match.losing_algo && JSON.stringify(match.losing_algo.team) == \"null\")\r\n                    if(isIndividual){\r\n                        opponent = \"losing_user\" in match ? match.losing_user.displayName : match.losing_algo.user\r\n                    }else{\r\n                        opponent = match.losing_algo.team.createdBy.displayName\r\n                    }\r\n                    result = \"W\"\r\n                    elo = match.losing_algo.rating\r\n                    algoName = match.losing_algo.name\r\n                    opponentAlgoId = match.losing_algo.id\r\n\r\n                    console.log(\"temp before: \"+temp)\r\n                    var tempRating = slope*index+startElo\r\n                    temp = tempRating+32*(1-Ea)\r\n                    console.log(\"temp after: \"+temp)\r\n\r\n                }else{\r\n                    loseCount += 1\r\n                    isIndividual = (\"winning_algo\" in match) || (\"team\" in match.winning_algo && JSON.stringify(match.winning_algo.team) == \"null\")\r\n                    if(isIndividual){\r\n                        opponent = \"winning_user\" in match ? match.winning_user.displayName : match.winning_algo.user\r\n                    }else{\r\n                        opponent = match.winning_algo.team.createdBy.displayName\r\n                    }\r\n                    result = \"L\"\r\n                    elo = match.winning_algo.rating\r\n                    algoName = match.winning_algo.name\r\n                    opponentAlgoId = match.winning_algo.id\r\n                    \r\n                    console.log(\"temp before: \"+temp)\r\n                    var tempRating = slope*index+startElo\r\n                    var tempRating = slope*index+startElo\r\n                    temp = tempRating+32*(0-Ea)\r\n                    console.log(\"temp after: \"+temp)\r\n                }\r\n                /*\r\n                console.log(\"m: \"+slope)\r\n                console.log(\"x: \"+(matchLength-index))\r\n                console.log(\"b: \"+startElo)\r\n                */\r\n                console.log(\"original: \"+(Math.round(slope*Math.abs(matchLength-index))+startElo))\r\n                console.log(\"new: \"+temp)\r\n                dataArray.push(Math.round(temp))\r\n                labelArray.push(algoName)\r\n                if(opponent in tableDataObj){\r\n                    tableDataObj[opponent][\"AlgoId\"].push(opponentAlgoId)\r\n                    tableDataObj[opponent][\"AlgoName\"].push(algoName)\r\n                    tableDataObj[opponent][\"Results\"].push(result)\r\n                    tableDataObj[opponent][\"Turns\"].push(match.turns)\r\n                    tableDataObj[opponent][\"Elo\"].push(elo)\r\n                    tableDataObj[opponent][\"Game\"].push(\"https://terminal.c1games.com/watch/\"+match.id)\r\n                    tableDataObj[opponent][\"count\"]+=1\r\n                }else{\r\n                    tableDataObj[opponent]={}\r\n                    tableDataObj[opponent][\"AlgoId\"]=[opponentAlgoId]\r\n                    tableDataObj[opponent][\"AlgoName\"]=[algoName]\r\n                    tableDataObj[opponent][\"Results\"]=[result]\r\n                    tableDataObj[opponent][\"Turns\"]=[match.turns]\r\n                    tableDataObj[opponent][\"Elo\"]=[elo]\r\n                    tableDataObj[opponent][\"Game\"]=[\"https://terminal.c1games.com/watch/\"+match.id]\r\n                    tableDataObj[opponent][\"count\"]=1\r\n                }\r\n                if(tableDataObj[opponent][\"count\"] > rivalCount){\r\n                    currentRival=opponent;\r\n                }\r\n            })\r\n            setChartData(dataArray)\r\n            setChartLabels(labelArray)\r\n            setRival(currentRival)\r\n            setRivalData(tableDataObj)\r\n            setCreatorName(creator)\r\n            setPlayerAlgoName(name)\r\n            setWins(winCount)\r\n            setLosses(loseCount)\r\n        });\r\n    }\r\n    const changeId = (id) => {\r\n        //console.log(\"CHANGEID\")\r\n        setId(id)\r\n    }\r\n    useEffect(()=>{\r\n        //console.log(\"algoId: \"+algoId)\r\n        //console.log(\"previousId: \"+previousId)\r\n        //console.log(\"pressedFind: \"+pressedFind)\r\n        if((algoId != previousId) && pressedFind){\r\n            //console.log(\"use effect triggered\")\r\n            setPreviousId(algoId)\r\n            find()\r\n        }\r\n    },[algoId, setId])\r\n    return (\r\n        <div className=\"Body\">\r\n            <div className=\"toCenter\">\r\n                <Input className=\"input\" onChange={(obj)=>onInputChange(obj.target.value)}/>\r\n                <Button className=\"button\" color=\"primary\" onClick={find}>Find</Button>\r\n                { Object.keys(lineData).length != 0 && creatorName != \"\" && playerAlgoName != \"\" && Object.keys(rivalData).length != 0 && rival != \"\" && rival in rivalData &&\r\n                <div className=\"toCenter\">\r\n                    <Chart data={lineData} creator={creatorName} algoName={playerAlgoName}/>\r\n                    <MyTable data={rivalData} rival={rival} changeId={changeId} wins={wins} losses={losses}></MyTable>\r\n                </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Body from './Body';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Body/>\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}